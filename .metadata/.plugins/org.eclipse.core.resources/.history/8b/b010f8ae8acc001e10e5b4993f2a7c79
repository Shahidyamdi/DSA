package com.dsa.linkedlist;

public class linkedlist {
	private ListNode head;
	
	public  void create(int data) {
		ListNode newNode = createNewNode(data);
		
		if(head == null) {
			head = newNode;
			
		}
		else {
			ListNode temp = head;
			while(temp.getNext()!=null) {
			temp =	temp.getNext();
			}
			temp.setNext(newNode);
		}
	}

	private ListNode createNewNode(int data) {
		ListNode newNode = new ListNode();
		newNode.setData(data);
		newNode.setNext(null);
		return newNode;
	}
	
	public void insertAtBeginning(int data) {
		ListNode newNode = createNewNode(data);
		newNode.setNext(head);
		head = newNode;
	}
	public void insertAtEnd(int data) {
      ListNode newNode = createNewNode(data);
		
		if(head == null) {
			head = newNode;
		}
		else {
			ListNode p = head;
			while(p.getNext()!=null) {
				p= p.getNext();
			}
			p.setNext(newNode);
		}
			
		
	}
	public void insertAtmiddle(int position, int data) {
		 ListNode newNode = createNewNode(data);
			
			if(head == null) {
				head = newNode;
			}
			else if(position==0){
				ListNode temp = head;
				temp.setNext(temp);
				head = temp;
				
			}
			else {
				ListNode temp = head;
				for(int i=1;i<position;i++) {
					temp =temp.getNext();
				}
				newNode.setNext(temp.getNext());
				temp.setNext(newNode);
				
			}
	}
	
	public void traverse() {
		ListNode currentnode = head;
		while(currentnode!=null) {
			System.out.println(currentnode.getData());
			System.out.println(currentnode.getNext());
			currentnode = currentnode.getNext();
		}
	}

}
